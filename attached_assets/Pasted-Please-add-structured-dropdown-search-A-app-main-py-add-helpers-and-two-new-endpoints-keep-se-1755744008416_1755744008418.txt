Please add structured dropdown search.

A) app/main.py — add helpers and two new endpoints (keep /search; just add these).
-----------------------------------------------------------------------------------
# ADD near the top with other imports
from typing import Dict, List
from datetime import date

def load_all_listings():
    listings = []
    for r in RETAILERS:
        listings.extend(load_csv(r["csv"], r["key"], r["name"]))
    return listings

# NEW: catalog of brands→lines→sizes so UI can populate dropdowns
@app.get("/catalog")
async def catalog():
    L = load_all_listings()
    brands = sorted(set(p.brand for p in L))
    lines: Dict[str, List[str]] = {}
    sizes: Dict[str, List[str]] = {}
    for b in brands:
        blines = sorted(set(p.line for p in L if p.brand == b))
        lines[b] = blines
        for ln in blines:
            key = f"{b}|{ln}"
            sizes[key] = sorted(set(p.size for p in L if p.brand == b and p.line == ln))
    # Expose common box counts the UI can show (informational)
    box_qty = [10, 12, 20, 24, 25, 50]
    return {"brands": brands, "lines": lines, "sizes": sizes, "box_qty": box_qty}

# NEW: strict compare endpoint — no fuzzy text; just brand/line/size
@app.get("/compare")
async def compare(brand: str, line: str, size: str, zip: str = "", session = Depends(get_session)):
    state = zip_to_state(zip)
    L = load_all_listings()
    rows = []
    for p in L:
        if p.brand == brand and p.line == line and p.size == size and p.in_stock:
            d = delivered_cents(p.base_cents, p.retailer_key, state)
            rows.append((p, d))
    rows.sort(key=lambda t: t[1])

    results = [{
        "retailer": p.retailer_name,
        "base": f"${p.base_cents/100:.2f}",
        "shipping": f"${(d - p.base_cents)/100:.2f}",
        "tax": "$0.00",
        "delivered": f"${d/100:.2f}",
        "url": cj_deeplink(p.url, sid="-".join([brand, line, size]).replace(" ", "_")[:100]),
        "cheapest": (i == 0),
    } for i,(p,d) in enumerate(rows)]

    # Save today's cheapest so /price_history works
    if rows:
        min_del = rows[0][1]
        await session.execute(
            PricePoint.__table__.delete().where(
                (PricePoint.day == date.today().isoformat()) &
                (PricePoint.brand == brand) &
                (PricePoint.line == line) &
                (PricePoint.size == size) &
                (PricePoint.source == "cheapest")
            )
        )
        session.add(PricePoint(
            day=date.today().isoformat(),
            brand=brand, line=line, size=size,
            delivered_cents=min_del, source="cheapest"
        ))
        await session.commit()

    return {"brand": brand, "line": line, "size": size, "results": results}


B) static/style.css — append small styles for selects.
------------------------------------------------------
/* dropdown UI */
select{padding:10px 12px;border:1px solid var(--rule);border-radius:10px;background:#fff}
.chooser{display:grid;grid-template-columns:1fr 1fr 1fr 120px 120px;gap:8px;margin-top:10px}


C) static/index.html — REPLACE the whole file with this version.
----------------------------------------------------------------
<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>CigarPriceScout</title>
    <link rel="stylesheet" href="/static/style.css">
  </head>
  <body>
    <div class="wrap">
      <header class="brand">
        <div class="mark">CS</div>
        <div>
          <div class="title">CigarPriceScout</div>
          <div class="muted">Cheapest delivered price — clearly shown</div>
        </div>
      </header>

      <section class="hero">
        <h1>Find the lowest delivered price on cigar boxes</h1>
        <p class="muted">Pick a brand, line & size. We compare multiple retailers and show an honest delivered total.</p>
        <div class="chooser">
          <select id="brand"><option value="">Brand…</option></select>
          <select id="line" disabled><option value="">Line…</option></select>
          <select id="size" disabled><option value="">Size…</option></select>
          <input id="zip" placeholder="ZIP (shipping est.)" value="97005">
          <button id="go">Compare</button>
        </div>
        <div id="chips" class="chips" style="display:none"></div>
      </section>

      <section id="out"></section>

      <footer class="foot">
        <div class="legal"><strong>Affiliate disclosure.</strong> We may earn a commission when you use our retailer links. We do not sell tobacco; we compare prices from third-party retailers. 21+ where applicable.</div>
      </footer>
    </div>

    <script>
      let CATALOG = null;

      function setChips(brand, line, size){
        const el = document.getElementById('chips');
        const arr = [];
        if(brand) arr.push(['Brand', brand]);
        if(line)  arr.push(['Line', line]);
        if(size)  arr.push(['Size', size.replace('x',' × ')]);
        if(arr.length){
          el.style.display='flex';
          el.innerHTML = arr.map(([k,v])=>`<span class="chip">${k}: ${v}</span>`).join('');
        }else{ el.style.display='none'; el.innerHTML=''; }
      }

      function fill(el, items, placeholder){
        el.innerHTML = `<option value="">${placeholder}</option>` + items.map(v=>`<option>${v}</option>`).join('');
        el.disabled = !items.length;
      }

      async function loadCatalog(){
        const res = await fetch('/catalog');
        CATALOG = await res.json();
        const brands = CATALOG.brands || [];
        fill(document.getElementById('brand'), brands, 'Brand…');
      }

      function onBrandChange(){
        const b = document.getElementById('brand').value;
        const lines = b ? (CATALOG.lines[b] || []) : [];
        fill(document.getElementById('line'), lines, 'Line…');
        fill(document.getElementById('size'), [], 'Size…');
        setChips(b, null, null);
      }

      function onLineChange(){
        const b = document.getElementById('brand').value;
        const l = document.getElementById('line').value;
        const key = `${b}|${l}`;
        const sizes = (CATALOG.sizes[key] || []);
        fill(document.getElementById('size'), sizes, 'Size…');
        setChips(b, l, null);
      }

      async function doCompare(){
        const b = document.getElementById('brand').value;
        const l = document.getElementById('line').value;
        const s = document.getElementById('size').value;
        const zip = document.getElementById('zip').value.trim();
        if(!b || !l || !s){ alert('Please choose brand, line, and size.'); return; }
        const res = await fetch(`/compare?brand=${encodeURIComponent(b)}&line=${encodeURIComponent(l)}&size=${encodeURIComponent(s)}&zip=${encodeURIComponent(zip)}`);
        const data = await res.json();
        setChips(b, l, s);
        const out = document.getElementById('out');
        if(!data.results || !data.results.length){
          out.innerHTML = '<div class="muted">No offers found for that selection.</div>';
          return;
        }
        out.innerHTML = `<h2>${b} — ${l} — ${s}</h2>
          <table>
            <thead><tr><th>Retailer</th><th>Base</th><th>Shipping</th><th>Est. tax</th><th>Delivered</th><th></th></tr></thead>
            <tbody>
              ${data.results.map(r=>`
                <tr>
                  <td>${r.retailer}${r.cheapest?' • <span class=best>Cheapest</span>':''}</td>
                  <td>${r.base}</td>
                  <td>${r.shipping}</td>
                  <td>${r.tax}</td>
                  <td><b>${r.delivered}</b></td>
                  <td><a href="${r.url}" target="_blank">Go →</a></td>
                </tr>`).join('')}
            </tbody>
          </table>`;
      }

      document.addEventListener('DOMContentLoaded', ()=>{
        loadCatalog();
        document.getElementById('brand').addEventListener('change', onBrandChange);
        document.getElementById('line').addEventListener('change', onLineChange);
        document.getElementById('go').addEventListener('click', doCompare);
      });
    </script>
  </body>
</html>
